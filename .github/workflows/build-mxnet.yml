name: Build mxnet on multiple platforms

on:
  push:
    branches: [ $default-branch ]
  pull_request:
    branches: [ $default-branch ]
  workflow_dispatch: {}

env:
  docker_image: quay.io/pypa/manylinux2010_x86_64:latest

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Set CMake version
        if: matrix.os == 'macos-latest'
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.31.0"
      - name: Set C/C++ toolchain
        if: matrix.os == 'windows-latest'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
      - name: Setup NASM
        if: matrix.os == 'windows-latest'
        uses: ilammy/setup-nasm@v1.5.2
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Check compiler version
        uses: knicknic/os-specific-run@v1.0.3
        with:
          macos: cc --version
          linux: docker run --rm -t $docker_image bash -c 'cc --version'
          windows: cl
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Build
        id: build
        uses: knicknic/os-specific-run@v1.0.3
        with:
          linux: |
            docker run --rm -v ${{ github.workspace }}:/mxnet-build -t $docker_image \
              bash -c "git config --global safe.directory '*' && cd /mxnet-build && mkdir build && cd build && cmake .. && make -j$(nproc)" && \
            echo "build-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
          macos: |
            mkdir build && cd build && cmake .. && make -j$(sysctl -n hw.logicalcpu) && \
            echo "build-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
          windows: |
            mkdir build && cd build && cmake .. -G Ninja && cmake --build . --config Release --parallel $env:NUMBER_OF_PROCESSORS && `
            Add-Content -Path $env:GITHUB_OUTPUT -Value "build-dir=$(Get-Location)\build"
      - name: Verify lib dependencies
        id: lib_output
        uses: knicknic/os-specific-run@v1.0.3
        with:
          macos: |
            lib_path="${{ steps.build.outputs.build-dir }}/install_root/lib/libmxnet.dylib"
            otool -L $lib_path | tee -a "$GITHUB_STEP_SUMMARY"
            echo "path=${lib_path}" >> "$GITHUB_OUTPUT"
          linux: |
            lib_path="${{ steps.build.outputs.build-dir }}/install_root/lib64/libmxnet.so"
            ldd -v $lib_path | tee -a "$GITHUB_STEP_SUMMARY"
            echo "path=${lib_path}" >> "$GITHUB_OUTPUT"
          windows: |
            $lib_path = "${{ steps.build.outputs.build-dir }}\install_root\bin\mxnet.dll"
            dumpbin /nologo /dependents $lib_path | Out-File -Append -FilePath "$GITHUB_STEP_SUMMARY"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "path=$lib_path"
      - name: Overwrite Python platform tag
        uses: knicknic/os-specific-run@v1.0.3
        with:
          macos: |
            if [[ $(arch) == 'arm64' ]]; then
              echo '_PYTHON_HOST_PLATFORM=macosx-11.0-arm64' >> $GITHUB_ENV
              echo 'ARCHFLAGS="-arch arm64"' >> $GITHUB_ENV
            else
              echo '_PYTHON_HOST_PLATFORM=macosx-10.9-x86_64' >> $GITHUB_ENV
              echo 'ARCHFLAGS="-arch x86_64"' >> $GITHUB_ENV
            fi
      - name: Bundle Python wheel
        id: wheel_output
        shell: bash
        run: |
          cp "${{ steps.lib_output.outputs.path }}" mxnet/python/mxnet/
          pip wheel mxnet/python
          wheel_path=(mxnet-*.whl)
          echo "path=${wheel_path}" >> "$GITHUB_OUTPUT"
      - name: 'Upload artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: artifacts_${{ matrix.os }}
          path: |
            ${{ steps.lib_output.outputs.path }}
            ${{ steps.wheel_output.outputs.path }}